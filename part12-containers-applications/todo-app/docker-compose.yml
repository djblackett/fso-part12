services:
  app:
    image: hello-front-dev
    build:
      context: ./todo-frontend
      dockerfile: Dockerfile
    # volumes: # - ./todo-frontend:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3210:3000
    container_name: hello-front-dev # This will name the container hello-front-dev
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080/api

  server:
    container_name: todo-server
    depends_on:
      - redis
      - mongo
    image: express-server # Declares which image to use
    build:
      context: ./todo-backend
      dockerfile: Dockerfile
    ports:
      # Declares the ports to publish
      - "3000:3000"
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database?directConnection=true
      - PORT=3000
    volumes:
      - ./todo-backend:/usr/src/app

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./todo-frontend:/usr/src/app
      - ./todo-frontend/build:/usr/share/nginx/html

    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app # wait for the frontend container to be started
      - server

  mongo:
    container_name: mongo
    image: mongo
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

  redis:
    container_name: "redis"
    image: redis
    ports:
      - "6379:6379"
    command: [ 'redis-server', '--appendonly', 'yes' ]
    volumes:
      # Declare the volume
      - ./todo-backend/redis_data:/data
      # - ./redis.conf:/temp/redis.conf

volumes:
  mongo_data:
